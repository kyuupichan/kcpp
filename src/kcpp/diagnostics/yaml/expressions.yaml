---
# Copyright (c) 2025, Neil Booth.
#
# All rights reserved.
#

#
# Expression diagnostics
#

character_does_not_exist:
  severity: error
  text: character %q0 does not exist in character set %q1

character_not_single_code_unit:
  severity: error
  text: character %q0 cannot be encoded as a single %q1 in character set %q2

comma_in_pp_expression:
  severity: warning
  text: comma operator should not be used in a preprocessor expression
  group: comma_expr

division_by_zero:
  severity: error
  text: "%select{division|remainder}0 by zero"

empty_character_literal:
  severity: error
  text: empty character literal
  group: invalid_pp_token

escape_sequence_value_too_large:
  severity: error
  text: "%select{octal|hexadecimal}0 escape sequence value %1 is too large for type %q2"

expected_expression:
  severity: error
  text: expected an expression

floating_point_in_pp_expr:
  severity: error
  text: floating point numbers are not permitted in preprocessor expressions

hexadecimal_exponent_required:
  severity: error
  text: hexadecimal floating point numbers require an exponent

integer_overflow:
  severity: error
  text: integer overflow

integer_too_large:
  severity: error
  text: integer value is too large for any integer type

invalid_digit:
  severity: error
  text: invalid %select{binary|octal|decimal|hexadecimal}0 digit

invalid_op_in_pp_expression:
  severity: error
  text: operator %q0 cannot appear in a preprocessor expression

invalid_numeric_suffix:
  severity: error
  text: invalid suffix on numeric literal

left_shift_of_negative_value:
  severity: warning       # Undefined behaviour in C
  group: shift_expr
  text: left shift of negative value

left_shift_overflows:
  severity: warning
  group: shift_expr
  text: left shift overflows

missing_digit_sequence:
  severity: error
  text: missing %select{octal|hexadecimal}0 digit sequence

multicharacter_literal:
  severity: warning
  group: multichar
  text: multicharacter literal

multicharacter_literal_truncated:
  severity: warning
  group: multichar
  text: value of multicharacter literal truncated to fit in type %q{int}

multicharacter_literal_with_prefix:
  severity: error
  text: multicharacter literals cannot have an encoding prefix

right_shift_of_negative_value:
  severity: warning       # Implementation-defined behaviour, so warning
  group: shift_expr
  text: right shift of negative value

shift_count_negative:
  severity: error
  group: shift_count
  text: shift count is negative

shift_count_too_large:
  severity: error
  group: shift_count
  text: shift count must be less than the integer width

string_concatenation_conflict:
  severity: error
  text: string concatenation with different %select{encoding prefixes|user-defined suffixes}0

string_concatenation_prior:
  severity: note
  text: prior conflicting %select{encoding prefix|user-defined suffix}0 was here

string_invalid_in_pp_expression:
  severity: error
  text: a string cannot appear in a preprocessor expression

undefined_identifier:
  severity: remark
  group: undefined
  text: "%q0 is not defined; replacing with %q{0}"

unrecognized_escape_sequence:
  severity: error
  text: invalid escape sequence %q0

unrecognized_universal_character_name:
  severity: error
  text: "%q0 is not the name of a universal character"

user_defined_suffix_in_pp_expr:
  severity: error
  text: a user-defined suffix cannot be used in a preprocessor expression

value_changes_sign:
  severity: warning
  group: sign_change
  text: integer promotion causes value to change sign from %0 to %1
