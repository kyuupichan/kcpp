import argparse
import itertools
import os
import sys

import yaml


template = '''#
# This file is generated by gen-targets - do not edit!
#

from ..unicode import Charset

from .target import Target
from .types import IntegerKind

__all__ = ['targets']


targets = {
<DEFNS>
}'''


def read_defns(entry):
    with open(entry.path, 'r') as f:
        doc = f.read()
    print(f'read {entry.path}', file=sys.stderr)
    return yaml.safe_load(doc)


def defns_lines(defns):
    def key_text(key):
        def charset(charset):
            if charset == 'UTF-16' or charset == 'UTF-32':
                charset += 'LE' if defn['is_little_endian'] else 'BE'
            return charset

        defn = defns[key]
        yield f'    {key!r}: Target('
        yield f'        is_little_endian={defn["is_little_endian"]},'
        yield f'        char_width={defn["char_width"]},'
        yield f'        short_width={defn["short_width"]},'
        yield f'        int_width={defn["int_width"]},'
        yield f'        long_width={defn["long_width"]},'
        yield f'        long_long_width={defn["long_long_width"]},'
        yield f'        char_kind=IntegerKind.{defn["char_kind"]},'
        yield f'        size_t_kind=IntegerKind.{defn["size_t_kind"]},'
        yield f'        wchar_t_kind=IntegerKind.{defn["wchar_t_kind"]},'
        yield f'        char16_t_kind=IntegerKind.{defn["char16_t_kind"]},'
        yield f'        char32_t_kind=IntegerKind.{defn["char32_t_kind"]},'
        yield f'        narrow_charset=Charset.from_name({charset(defn["narrow_charset"])!r}),'
        yield f'        wide_charset=Charset.from_name({charset(defn["wide_charset"])!r}),'
        yield '    ),'

    return '\n'.join(itertools.chain(*(key_text(key) for key in sorted(defns))))


def main():
    parser = argparse.ArgumentParser(
        'gen-targets',
        description='Generate target definitions from a target definition file.'
    )

    parser.add_argument('dir', help='Target definition  directory')
    args = parser.parse_args()

    defns = {}
    directory = args.dir
    for entry in os.scandir(directory):
        if entry.is_file() and entry.name.endswith('.yaml'):
            file_defns = read_defns(entry)
            dups = set(defns).intersection(file_defns)
            if dups:
                dups = ', '.join(dups)
                print(f'ERROR: duplicate definitions: {dups}', file=sys.stderr)
                exit(1)
            defns.update(file_defns)

    body = template.replace('<DEFNS>', defns_lines(defns))
    print(body)


if __name__ == '__main__':
    main()
