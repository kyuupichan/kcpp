import argparse
import itertools
import os
import sys
import yaml


template = '''#
# This file is generated by gen-diags - do not edit!
#

from dataclasses import dataclass
from enum import IntEnum, auto


__all__ = [
    'DID', 'DiagnosticGroup', 'DiagnosticSeverity', 'DiagnosticDefinition',
    'diagnostic_definitions',
]


class DiagnosticSeverity(IntEnum):
    none = 0
    remark = 1
    note = 2
    warning = 3
    error = 4
    fatal = 5
    ice = 6


class DiagnosticGroup(IntEnum):
    none = 0
<GROUPS>


class DID(IntEnum):
<DIDS>

    def __repr__(self):
        return f'DID.{self.name}'


@dataclass
class DiagnosticDefinition:
    did: DID
    severity: DiagnosticSeverity
    group: DiagnosticGroup
    text: str


diagnostic_definitions = {
<DEFNS>
}'''


def read_defns(entry):
    with open(entry.path, 'r') as f:
        doc = f.read()
    print(f'read {entry.path}', file=sys.stderr)
    return yaml.safe_load(doc)


def did_lines(defns):
    return '\n'.join(f'    {did} = auto()' for did in sorted(defns))


def group_lines(defns):
    groups = set(defn.get('group') for defn in defns.values())
    groups.discard(None)

    return '\n'.join(f'    {group} = {n}'
                     for n, group in enumerate(sorted(groups), start=1))


def defns_lines(defns):
    def key_text(key):
        defn = defns[key]
        group = defn.get('group', 'none')
        if ' ' in group:
            print(f'ERROR: bad group name: {group}', file=sys.stderr)
        yield f'    DID.{key}: DiagnosticDefinition('
        yield f'        DID.{key},'
        yield f'        DiagnosticSeverity.{defn["severity"]},'
        yield f'        DiagnosticGroup.{group},'
        yield f'        {defn["text"]!r},'
        yield '    ),'

    return '\n'.join(itertools.chain(*(key_text(key) for key in sorted(defns))))


def main():
    parser = argparse.ArgumentParser(
        'gen-diags',
        description='Generate diagnostic definitions from .yaml files.'
    )

    parser.add_argument('dir', help='Diagnostic definitions directory')
    args = parser.parse_args()

    defns = {}
    directory = args.dir
    for entry in os.scandir(directory):
        if entry.is_file() and entry.name.endswith('.yaml'):
            file_defns = read_defns(entry)
            dups = set(defns).intersection(file_defns)
            if dups:
                dups = ', '.join(dups)
                print(f'ERROR: duplicate definitions: {dups}', file=sys.stderr)
                exit(1)
            spaces = [defn for defn in file_defns if ' ' in defn]
            if spaces:
                dups = ', '.join(spaces)
                print(f'ERROR: definitions with spaces: {spaces}', file=sys.stderr)
                exit(1)
            defns.update(file_defns)

    body = template.replace('<GROUPS>', group_lines(defns))
    body = body.replace('<DIDS>', did_lines(defns))
    body = body.replace('<DEFNS>', defns_lines(defns))
    print(body)


if __name__ == '__main__':
    main()
